eps默认设为1e-8
别把 a/(b*c) 写成 a/b*c
BFS的vis标记一定要在Continue判断之后,push之前打
全局变量记得初始化
线段树同时维护max和sum的时候，记得seg数组开多个，合并也得多个
树链剖分的修改与查询，给线段树的参数注意是deep小的节点在前，还得套一个dfn[x]
用lower_bound实现的LIS改成upper_bound即可是不降的。还有更多操作
同时要用到两个同样名字的变量的算法时一定要区分好。比如并查集和树剖都有的fa数组
向下取整的时候注意，要分正数和负数来讨论。

想题的时候注意一下几点：
1.有些做法既快又好写
2.边界条件很多的情况下可能可以转化
3.也许根据两个数组的长度决定顺序，能够让边界条件简单很多
--from leetcode #4

有两个循环退出条件，忘记判断
忘记判断下标是否越界

带有子树信息的并查集合并，在get_fa和merge函数都需要更新所带的数据。

面试题一定要充分考虑鲁棒性，对于输入保证的东西最好也check一下。甚至可能会有两链表相交这种东西。

注意考虑hash的做法，比如类似于桶排序的东西，可以用hash_set，也就是unordered_set来解决。各种操作复杂度都是O(1)。

###有时候出错可能是因为自身的错误导致了程序不该自己写的部分出错。
###在对链表进行操作时，如果连接方式特殊，记得最后把不需要的next设为null，以免出错。

面试的时候不要执着于想最优解，可能只需要一个比较好的做法就行了

字符串的题一定要考虑hash的做法！

按复杂度做题

cout<<Dicin_flow()<<" "<<tot_cost;
x = nx[x][y], y = ny[x][y]
以上两种沙雕写法是不可取的

检查不出错的时候记得反复确认题意。比如概率的一道傻逼题